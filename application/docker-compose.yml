version: '3.8'
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "1m"
    max-file: "1"

services:
  # nginx_test: # Testing traefik routing"
  #   image: nginx
  #   ports:
  #     - "8443:80"
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.nginx.rule=Host(`boss.kapilkumaria.com`) && PathPrefix(`/nginx`)"          
  #     - "traefik.http.services.nginx_test.loadbalancer.server.port=80"      
  #     - "traefik.http.routers.nginx.tls=true"
  #     - "traefik.http.routers.nginx.entrypoints=websecure"
  #     - "traefik.http.routers.nginx.tls.certresolver=myresolver"   
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
  #     - ./html:/usr/share/nginx/html:ro  
  #   networks:
  #     - app_network
  #   logging: *default-logging

  # traefik:
  #   image: traefik:v2.10.1
  #   restart: unless-stopped
  #   command:
  #     - "--entrypoints.web.address=:80"
  #     - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
  #     - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
  #     - "--entrypoints.websecure.address=:443"
  #     - "--providers.docker=true"
  #     - "--providers.docker.exposedByDefault=false"
  #     - "--api"
  #     #- "--certificatesresolvers.letsencryptresolver.acme.email=kapil.kumaria@gmail.com"
  #     #- "--certificatesresolvers.myresolver.acme.storage=../traefik/letsencrypt/acme.json"
  #     - "--certificatesresolvers.letsencryptresolver.acme.email=kapil.kumaria@gmail.com"
  #     - "--certificatesresolvers.myresolver.acme.storage=/home/ubuntu/cv-challenge01/traefik/letsencrypt/acme.json"
  #     - "--certificatesresolvers.letsencryptresolver.acme.tlschallenge=true"
  #     - "--accesslog=true"
  #     - "--log.level=ERROR"
  #   ports:
  #     - 80:80
  #     - 443:443
  #     - 8080:8080
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - /home/ubuntu/cv-challenge01/traefik/letsencrypt/acme.json:/acme.json      
  #   labels:
  #     - "traefik.enable=true"
  #     # HTTP Router
  #     - "traefik.http.routers.traefik-http.rule=Host(`boss.kapilkumaria.com`) || Host(`www.boss.kapilkumaria.com`)"
  #     - "traefik.http.routers.traefik-http.entrypoints=web"
  #     - "traefik.http.services.traefik-http.loadbalancer.server.port=8080"
  #     # www to non-www redirect
  #     - "traefik.http.routers.traefik-https.middlewares=www-to-non-www"
  #     # HTTP to HTTPS redirect
  #     - "traefik.http.middlewares.www-to-non-www.redirectregex.regex=^https?://www\\.(.+)"
  #     - "traefik.http.middlewares.www-to-non-www.redirectregex.replacement=https://$1"
  #     - "traefik.http.middlewares.www-to-non-www.redirectregex.permanent=true"
  #     # HTTPS Router
  #     - "traefik.http.routers.traefik-https.rule=Host(`boss.kapilkumaria.com`) || Host(`www.boss.kapilkumaria.com`)"
  #     - "traefik.http.routers.traefik-https.entrypoints=websecure"
  #     - "traefik.http.routers.traefik-https.service=api@internal"
  #     - "traefik.http.routers.traefik-https.tls.certresolver=letsencryptresolver"
  #   networks:
  #     - app_network      
    
  # traefik:
  #   image: traefik:v2.10.1
  #   restart: unless-stopped
  #   command:
  #     - "--entrypoints.web.address=:80"
  #     - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
  #     - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
  #     - "--entrypoints.websecure.address=:443"
  #     - "--providers.docker=true"
  #     - "--providers.docker.exposedByDefault=false"
  #     - "--api"
  #     - "--certificatesresolvers.letsencryptresolver.acme.email=kapil.kumaria@gmail.com"
  #     - "--certificatesresolvers.letsencryptresolver.acme.storage=/acme.json"
  #     - "--certificatesresolvers.letsencryptresolver.acme.tlschallenge=true"
  #     - "--accesslog=true"
  #     - "--log.level=ERROR"
  #   ports:
  #     - 80:80
  #     - 443:443
  #     - 8080:8080
  #   volumes:
  #     - /home/ubuntu/cv-challenge01/traefik/letsencrypt/acme.json:/acme.json
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.traefik-http.rule=Host(`boss.kapilkumaria.com`) || Host(`www.boss.kapilkumaria.com`)"
  #     - "traefik.http.routers.traefik-http.entrypoints=web"
  #     - "traefik.http.routers.traefik-https.rule=Host(`boss.kapilkumaria.com`) || Host(`www.boss.kapilkumaria.com`)"
  #     - "traefik.http.routers.traefik-https.entrypoints=websecure"
  #     - "traefik.http.routers.traefik-https.tls.certresolver=letsencryptresolver"
  #   networks:
  #     - app_network

  traefik:
    image: traefik:v2.10.1
    restart: unless-stopped
    command:
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--api"
      - "--certificatesresolvers.letsencryptresolver.acme.email=kapil.kumaria@gmail.com"
      - "--certificatesresolvers.letsencryptresolver.acme.storage=/acme.json"
      - "--certificatesresolvers.letsencryptresolver.acme.tlschallenge=true"
      - "--accesslog=true"
      - "--log.level=ERROR"
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      #- ./traefik/acme.json:/acme.json
      - /home/ubuntu/cv-challenge01/traefik/letsencrypt/acme.json:/acme.json
    labels:
      - "traefik.enable=true"
      # HTTP Router
      - "traefik.http.routers.traefik-http.rule=Host(`boss.kapilkumaria.com`) || Host(`www.boss.kapilkumaria.com`)"
      - "traefik.http.routers.traefik-http.entrypoints=web"
      - "traefik.http.services.traefik-http.loadbalancer.server.port=8080"
      # www to non-www redirect
      - "traefik.http.routers.traefik-https.middlewares=www-to-non-www"
      # HTTP to HTTPS redirect
      - "traefik.http.middlewares.www-to-non-www.redirectregex.regex=^https?://www\\.(.+)"
      - "traefik.http.middlewares.www-to-non-www.redirectregex.replacement=https://$1"
      - "traefik.http.middlewares.www-to-non-www.redirectregex.permanent=true"
      # HTTPS Router
      - "traefik.http.routers.traefik-https.rule=Host(`boss.kapilkumaria.com`) || Host(`www.boss.kapilkumaria.com`)"
      - "traefik.http.routers.traefik-https.entrypoints=websecure"
      - "traefik.http.routers.traefik-https.service=api@internal"
      - "traefik.http.routers.traefik-https.tls.certresolver=letsencryptresolver"
      - "traefik.http.middlewares.rewrite-overview.replacepathregex.regex=/api/overview"
      - "traefik.http.middlewares.rewrite-overview.replacepathregex.replacement=/api/v1/openapi.json"
      #- "traefik.http.routers.backend.middlewares=rewrite-overview"
    networks:
      - app_network      

  frontend:
    build:
      context: ../frontend # Adjust the path to your frontend directory  
    env_file:
      - ../frontend/.env    
    container_name: frontend
    # environment:
    #   - NGINX_REWRITE=/api/overview:/api/v1/openapi.json
    depends_on:
      - backend # Ensure the backend service starts first
    ports:
      - "5173:5173"

    # environment:
    #   - NODE_ENV=production
    #   - VITE_API_URL=http://localhost:8000 # Backend service URL (internal networking)
    #   #- VITE_API_URL=https://boss.kapilkumaria.com/api
    # volumes:
    #   - ../:/app
    #   - /app/node_modules
    #   #- ./nginx.conf:/etc/nginx/nginx.conf:ro
    # ports:
    #   - "8082:80"
    
    labels:
      # - "traefik.enable=true"
      # - "traefik.http.routers.frontend.rule=Host(`boss.kapilkumaria.com`) && PathPrefix(`/`)"
      # - "traefik.http.middlewares.frontend-stripprefix.stripprefix.prefixes=/api/v1,/docs"
      # - "traefik.http.routers.frontend.middlewares=frontend-stripprefix"
      # - "traefik.http.services.frontend.loadbalancer.server.port=80"
      # - "traefik.http.routers.frontend.tls=true"
      # - "traefik.http.routers.frontend.entrypoints=websecure"
      # - "traefik.http.routers.frontend.tls.certresolver=myresolver"      
      
      - "traefik.enable=true"      
      # HTTP Router
      - "traefik.http.routers.frontend-http.rule=(Host(`boss.kapilkumaria.com`)  || Host(`www.boss.kapilkumaria.com`))"
      - "traefik.http.routers.frontend-http.entrypoints=web"
      # - "traefik.http.services.frontend.loadbalancer.server.port=5173"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      # www to non-www redirect
      - "traefik.http.routers.frontend-https.middlewares=www-to-non-www"
      # HTTPS Router
      - "traefik.http.routers.frontend-https.rule=(Host(`boss.kapilkumaria.com`) || Host(`www.boss.kapilkumaria.com`))"
      - "traefik.http.routers.frontend-https.entrypoints=websecure"
      - "traefik.http.routers.frontend-https.tls.certresolver=letsencryptresolver"
      - "traefik.http.routers.frontend-https.service=frontend" # optional

    networks:
      - app_network
    # logging: *default-logging


  backend:
    build:
      context: ../backend   
      dockerfile: Dockerfile
    env_file:
      - ../backend/.env   
    container_name: backend
    depends_on:
      - db
  #  command: >
  #    sh -c "wait-for-it db:5432 --timeout=30 --strict && python /app/main.py || echo 'Application failed to start' && sleep 60"
  #    sh -c "wait-for-it db:5432 --timeout=30 --strict" && python /app/main.py"
      
    # ports:
    #   - "8000:8000"
    # environment:
    #   - POSTGRES_URL=postgresql://postgres:1234567890@postgres:5432/fastapi
    #env_file:
    #  - ../backend/.env
    # volumes:
    #   - ../backend:/app/backend
    labels:      
      # - "traefik.enable=true"
      # # Router configuration
      # - "traefik.http.routers.backend.rule=Host(`boss.kapilkumaria.com`) && (PathPrefix(`/api/v1`) || PathPrefix(`/docs`))"
      # - "traefik.http.routers.backend.tls=true"
      # - "traefik.http.routers.backend.entrypoints=websecure"
      # - "traefik.http.routers.backend.tls.certresolver=myresolver"    
      # # Service configuration
      # - "traefik.http.services.backend.loadbalancer.server.port=8000"    

        - traefik.enable=true
        # HTTP Router
        - traefik.http.routers.backend-http.rule=((Host(`boss.kapilkumaria.com`)  || Host(`www.boss.kapilkumaria.com`)) && (PathPrefix(`/api/v1`) || PathPrefix(`/redoc`) || PathPrefix(`/docs`)))
        - traefik.http.routers.backend-http.entrypoints=web
        - traefik.http.services.backend-http.loadbalancer.server.port=8000
        # www to non-www redirect
        - "traefik.http.routers.backend-https.middlewares=www-to-non-www"
        # HTTPS Router
        - traefik.http.routers.backend-https.rule=(Host(`boss.kapilkumaria.com`) && (PathPrefix(`/api/v1`) || PathPrefix(`/redoc`) || PathPrefix(`/docs`)))
        - traefik.http.routers.backend-https.entrypoints=websecure
        - traefik.http.routers.backend-https.tls.certresolver=letsencryptresolver
    networks:
      - app_network
    #command: /bin/sh -c "chmod +x /app/backend/prestart.sh && poetry run bash /app/backend/prestart.sh && poetry run uvicorn app.main:app --reload --host 0.0.0.0"
    # logging: *default-logging

  # swagger-ui:
  #   image: swaggerapi/swagger-ui:latest
  #   container_name: swagger-ui
  #   environment:
  #     - SWAGGER_JSON=http://backend:8000/api/v1/openapi.json # Points to the backend's OpenAPI schema
  #   ports:
  #     - "8081:8080"
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.swagger.rule=Host(`boss.kapilkumaria.com`) && PathPrefix(`/swagger`)"
  #     - "traefik.http.middlewares.swagger-stripprefix.stripprefix.prefixes=/swagger"
  #     - "traefik.http.routers.swagger.middlewares=swagger-ui-stripprefix"
  #     - "traefik.http.middlewares.swagger-strip.stripprefix.prefixes=/swagger"
  #     - "traefik.http.routers.swagger.middlewares=swagger-strip"
  #     - "traefik.http.routers.swagger.entrypoints=websecure"
  #     - "traefik.http.routers.swagger.tls=true"
  #     - "traefik.http.routers.swagger.tls.certresolver=myresolver"
  #     - "traefik.http.services.swagger.loadbalancer.server.port=8080"
  #   networks:
  #     - app_network
  #   depends_on:
  #     - backend
  #   logging: *default-logging

      
  db:
    image: postgres:13
    #container_name: db
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: app
      POSTGRES_PASSWORD: changethis123      
    # volumes:
    #   - db_data:/var/lib/postgresql/data
    # ports:
    #   - "8900:5432"
    networks:
      - app_network
    # logging: *default-logging
    # restart: always

  adminer:
    image: adminer:latest
    container_name: adminer
    environment:
      ADMINER_DEFAULT_SERVER: db
      #ADMINER_DESIGN: galkaev
    # depends_on:
    #   - db
    # ports:
    #   - 9001:8080
    # restart: always
    labels:
      # - "traefik.enable=true"
      # - "traefik.http.routers.adminer.rule=Host(`boss.kapilkumaria.com`) && PathPrefix(`/db`)"
      # - "traefik.http.routers.adminer.entrypoints=websecure"
      # - "traefik.http.routers.adminer.tls.certresolver=myresolver"
      # - "traefik.http.middlewares.adminer-strip.stripprefix.prefixes=/db"
      # - "traefik.http.routers.adminer.middlewares=adminer-strip"
      # - "traefik.http.routers.adminer.tls=true"
      # - "traefik.http.services.adminer.loadbalancer.server.port=8080"

        - traefik.enable=true
        # HTTP Router
        - traefik.http.routers.adminer-http.rule=Host(`boss.kapilkumaria.com`) || Host(`www.boss.kapilkumaria.com`)
        - traefik.http.routers.adminer-http.entrypoints=web
        - traefik.http.services.adminer.loadbalancer.server.port=8080
        # www to non-www redirect
        - "traefik.http.routers.adminer-https.middlewares=www-to-non-www"
        # HTTPS Router
        - traefik.http.routers.adminer-https.rule=Host(`boss.kapilkumaria.com`) || Host(`www.boss.kapilkumaria.com`)
        - traefik.http.routers.adminer-https.entrypoints=websecure
        - traefik.http.routers.adminer-https.tls.certresolver=letsencryptresolver
    networks:
      - app_network
    #logging: *default-logging

# volumes:
#   db_data:
#     driver: local  
networks:
  app_network:
    external: true