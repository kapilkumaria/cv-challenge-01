version: '3'
services:
  nginx_test:
    image: nginx
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`nginx.kapilkumaria.com`)"
 #     - "traefik.http.routers.nginx.rule=Host(`kapilkumaria.com/nginx`)"
      #- "traefik.http.routers.nginx.rule=Host(`kapilkumaria.com`) && PathPrefix(`/nginx`)"
      - "traefik.http.routers.nginx.entrypoints=websecure"
      - "traefik.http.routers.nginx.tls=true"
      - "traefik.http.routers.nginx.tls.certresolver=myresolver"
    volumes:
      - ./html:/usr/share/nginx/html:ro
    networks:
      - app_network

  frontend:
    build:
      context: ../frontend # Adjust the path to your frontend directory
      #dockerfile: ../frontend/Dockerfile
    container_name: frontend
    environment:
      VITE_API_URL: http://backend:8000 # Backend service URL (internal networking)
    depends_on:
      - backend # Ensure the backend service starts first
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`kapilkumaria.com`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"  
    networks:
      - app_network    

  backend:
    build:
      context: ../backend
      #dockerfile: ../backend/Dockerfile
    container_name: backend
    environment:
      POSTGRES_URL: postgresql://app:kapil123@db:5432/app # Use internal networking for DB
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.kapilkumaria.com`)"
      #- "traefik.http.routers.backend.rule=Host(`kapilkumaria.com`) && PathPrefix(`/api`)"
      #- "traefik.http.routers.backend.rule=Host(`kapilkumaria.com/api`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"      
    networks:
      - app_network

  db:
    image: postgres:13-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: kapil123
      POSTGRES_DB: app
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app_network
    volumes:
      - db_data:/var/lib/postgresql/data

volumes:
  db_data:
    driver: local  

networks:
  app_network:
    external: true