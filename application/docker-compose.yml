version: '3.8'
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "1m"
    max-file: "1"

services:
  nginx_test: # Testing traefik routing"
    image: nginx
    ports:
      - "8443:80"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`boss.kapilkumaria.com`) && PathPrefix(`/nginx`)"          
      - "traefik.http.services.nginx_test.loadbalancer.server.port=80"      
      - "traefik.http.routers.nginx.tls=true"
      - "traefik.http.routers.nginx.entrypoints=websecure"
      - "traefik.http.routers.nginx.tls.certresolver=myresolver"   
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./html:/usr/share/nginx/html:ro  
    networks:
      - app_network
    logging: *default-logging
    

  frontend:
    build:
      context: ../frontend # Adjust the path to your frontend directory      
    container_name: frontend
    depends_on:
      - backend # Ensure the backend service starts first
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:8000 # Backend service URL (internal networking)
      #- VITE_API_URL=https://boss.kapilkumaria.com/api
    volumes:
      - ../:/app
      - /app/node_modules
      #- ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8082:80"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`boss.kapilkumaria.com`) && PathPrefix(`/`)"
      - "traefik.http.middlewares.frontend-stripprefix.stripprefix.prefixes=/api,/docs"
      - "traefik.http.routers.frontend.middlewares=frontend-stripprefix"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"      
    networks:
      - app_network
    logging: *default-logging


  backend:
    build:
      context: ../backend   
      dockerfile: Dockerfile   
    container_name: backend
    depends_on:
     - postgres
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_URL=postgresql://postgres:1234567890@postgres:5432/fastapi
    #env_file:
    #  - ../backend/.env
    # volumes:
    #   - ../backend:/app/backend
    labels:      
      - "traefik.enable=true"
      # Router configuration
      - "traefik.http.routers.backend.rule=Host(`boss.kapilkumaria.com`) && (PathPrefix(`/api`) || PathPrefix(`/docs`))"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"    
      # Service configuration
      - "traefik.http.services.backend.loadbalancer.server.port=8000"    
    networks:
      - app_network
    #command: /bin/sh -c "chmod +x /app/backend/prestart.sh && poetry run bash /app/backend/prestart.sh && poetry run uvicorn app.main:app --reload --host 0.0.0.0"
    logging: *default-logging

  # swagger-ui:
  #   image: swaggerapi/swagger-ui:latest
  #   container_name: swagger-ui
  #   environment:
  #     - SWAGGER_JSON=http://backend:8000/api/v1/openapi.json # Points to the backend's OpenAPI schema
  #   ports:
  #     - "8081:8080"
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.swagger.rule=Host(`boss.kapilkumaria.com`) && PathPrefix(`/swagger`)"
  #     - "traefik.http.middlewares.swagger-stripprefix.stripprefix.prefixes=/swagger"
  #     - "traefik.http.routers.swagger.middlewares=swagger-ui-stripprefix"
  #     - "traefik.http.middlewares.swagger-strip.stripprefix.prefixes=/swagger"
  #     - "traefik.http.routers.swagger.middlewares=swagger-strip"
  #     - "traefik.http.routers.swagger.entrypoints=websecure"
  #     - "traefik.http.routers.swagger.tls=true"
  #     - "traefik.http.routers.swagger.tls.certresolver=myresolver"
  #     - "traefik.http.services.swagger.loadbalancer.server.port=8080"
  #   networks:
  #     - app_network
  #   depends_on:
  #     - backend
  #   logging: *default-logging

      
  postgres:
    image: postgres:13
    container_name: fastapi-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234567890
      POSTGRES_DB: fastapi
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "8900:5432"
    networks:
      - app_network
    logging: *default-logging
    restart: always

  adminer:
    image: adminer:latest
    container_name: adminer
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: galkaev
    depends_on:
      - postgres
    ports:
      - 9001:8080
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`boss.kapilkumaria.com`) && PathPrefix(`/db`)"
      - "traefik.http.routers.adminer.entrypoints=websecure"
      - "traefik.http.routers.adminer.tls.certresolver=myresolver"
      - "traefik.http.middlewares.adminer-strip.stripprefix.prefixes=/db"
      - "traefik.http.routers.adminer.middlewares=adminer-strip"
      - "traefik.http.routers.adminer.tls=true"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"
    networks:
      - app_network
    logging: *default-logging

volumes:
  db_data:
    driver: local  
networks:
  app_network:
    external: true