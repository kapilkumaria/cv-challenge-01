version: '3.8'

services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - "--api.insecure=true" # Enable Traefik dashboard (remove in production for security)
      - "--providers.docker=true" # Enable Docker provider
      - "--providers.docker.exposedbydefault=false" # Disable exposing all containers by default
      - "--entrypoints.web.address=:80" # HTTP entrypoint
      - "--entrypoints.websecure.address=:443" # HTTPS entrypoint
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true" # Enable TLS challenge for Let's Encrypt
      - "--certificatesresolvers.myresolver.acme.email=kapil.kumaria@gmail.com" # Replace with your email
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json" # Persistent storage for certificates
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure" # Redirect HTTP to HTTPS
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https" # Ensure redirection uses HTTPS
    ports:
      - "80:80" # HTTP
      - "443:443" # HTTPS
      - "8080:8080" # Traefik Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Required for Traefik to interact with Docker
      - ./traefik_data:/letsencrypt # Persistent volume for certificates
    networks:
      - app_network

  frontend:
    build:
      context: ./frontend # Adjust the path to your frontend directory
      dockerfile: Dockerfile
    environment:
      VITE_API_URL: http://backend:8000 # Backend service URL (internal networking)
    depends_on:
      - backend # Ensure the backend service starts first
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.services.frontend.loadbalancer.server.port=80" # Port inside the container
      - "traefik.http.routers.frontend.tls.certresolver=myresolver" # Enable TLS frontend
    networks:
      - app_network

  backend:
    build:
      context: ./backend
    container_name: backend
    environment:
      POSTGRES_URL: postgresql://app:kapil123@db:5432/app # Use internal networking for DB
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.services.backend.loadbalancer.server.port=8000" # Port inside the container
      - "traefik.http.routers.backend.tls.certresolver=myresolver" # Enable TLS for backend
      - "traefik.http.routers.swagger.rule=PathPrefix(`/docs`)" # For FastAPI Swagger docs
      - "traefik.http.routers.swagger.entrypoints=websecure"
      - "traefik.http.services.swagger.loadbalancer.server.port=8000"
      - "traefik.http.routers.swagger.tls.certresolver=myresolver" # Enable TLS for Swagger
    networks:
      - app_network

  db:
    image: postgres:13-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: kapil123
      POSTGRES_DB: app
    networks:
      - app_network
    volumes:
      - db_data:/var/lib/postgresql/data

volumes:
  db_data:
    driver: local
  traefik_data:
    driver: local

networks:
  app_network:
    driver: bridge

